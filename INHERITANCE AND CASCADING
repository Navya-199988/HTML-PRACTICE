1. Inheritance in CSS

Inheritance means some CSS properties applied to a parent element are automatically passed down to its children.

Example:

body {
  color: blue; /* inherited by child elements */
  font-family: Arial; /* inherited */
  background-color: lightgrey; /* NOT inherited */
}

<body>
  <div>
    <p>This text is blue in Arial font</p>
  </div>
</body>


Inherited properties:
__________________
color

font-family, font-size, line-height

visibility

Not inherited by default:
____________________________
background

border

margin, padding

width, height

üëâ You can force inheritance using:

p {
  background-color: inherit;
}
---------------------------------------------------
üìù CSS Inheritance Practice Problems
Problem 1: Color Inheritance
<!DOCTYPE html>
<html>
<head>
<style>
  body {
    color: red;
  }
</style>
</head>
<body>
  <div>
    <p>Hello CSS</p>
  </div>
</body>
</html>
‚ùì What will be the color of "Hello CSS"?

Problem 2: Background Inheritance
<!DOCTYPE html>
<html>
<head>
<style>
  body {
    background-color: yellow;
  }
</style>
</head>
<body>
  <div>
    <p>Hello World</p>
  </div>
</body>
</html>
‚ùì Will <p> have a yellow background? Why or why not?

Problem 3: Forced Inheritance
<!DOCTYPE html>
<html>
<head>
<style>
  div {
    color: blue;
  }
  p {
    color: inherit;
  }
</style>
</head>
<body>
  <div>
    <p>Hello Inherit</p>
  </div>
</body>
</html>
‚ùì What will be the color of "Hello Inherit"?

Problem 4: Mixed Inheritance
<!DOCTYPE html>
<html>
<head>
<style>
  body {
    font-family: Arial;
    color: green;
  }
  p {
    font-family: inherit;
  }
</style>
</head>
<body>
  <div>
    <p>Hello Fonts</p>
  </div>
</body>
</html>
‚ùì What will be the font and color of "Hello Fonts"?

Problem 5: Override vs Inheritance
<!DOCTYPE html>
<html>
<head>
<style>
  body {
    color: brown;
  }
  p {
    color: purple;
  }
</style>
</head>
<body>
  <div>
    <p>Hello Override</p>
  </div>
</body>
</html>
‚ùì What will be the final color of "Hello Override"?

Problem 1: Color Inheritance

‚úÖ Your Answer: RED
‚úî Correct ‚Üí color is inherited, so <p> gets red from <body>.

Problem 2: Background Inheritance

‚úÖ Your Answer: <p> will not get yellow background, it‚Äôs transparent
‚úî Correct ‚Üí background-color is not inherited, so <p> is transparent, but it looks yellow because the parent‚Äôs yellow background shows through.

Problem 3: Forced Inheritance

‚úÖ Your Answer: blue
‚úî Correct ‚Üí <div> has color: blue. The <p> has color: inherit, so it inherits blue from <div>.

Problem 4: Mixed Inheritance

‚úÖ Your Answer: Arial, green
‚úî Correct ‚Üí font-family is inherited (Arial from <body>). color is also inherited (green), since <p> has no override.

Problem 5: Override vs Inheritance

‚úÖ Your Answer: purple
‚úî Correct ‚Üí body gives brown, but <p> has its own style purple, which overrides inherited color.
__________________________________________________________________________________________________________________________________________
2. Cascading in CSS

Cascade means: When multiple rules apply to the same element, which one wins?

CSS decides based on 3 rules:

a) Importance

!important overrides everything.

p {
  color: red !important; /* wins always */
}

b) Specificity

Inline styles > IDs > Classes/Attributes/Pseudo-classes > Elements/Pseudo-elements.

Selector	Specificity Value
Inline style	1000
#id	100
.class / [attr] / :hover	10
element / ::before	1

Example:

p { color: blue; }        /* specificity 1 */
.text { color: green; }   /* specificity 10 */
#para { color: red; }     /* specificity 100 */


‚Üí If a <p id="para" class="text">, final color = red ‚úÖ

c) Source Order

If specificity is the same, the last rule written wins.

p { color: blue; }
p { color: green; }


‚Üí Final = green

Quick Analogy

Inheritance = traits passed down from parents to children (like hair color).

Cascading = resolving conflicts when multiple "rules" try to apply (like deciding whose opinion to follow).

‚ö° Example combining both:

<style>
  body { color: blue; }          /* inherited by children */
  p { color: green; }            /* more specific than body */
  .highlight { color: red; }     /* class overrides element */
  #special { color: orange; }    /* id overrides class */
  p { color: purple !important; }/* highest priority */
</style>

<p>This is normal</p>
<p class="highlight">This is highlighted</p>
<p id="special">This is special</p>


üëâ All <p> will end up purple because of !important.



üìù Advanced CSS Inheritance + Cascading Problems
Problem 6: ID vs Class
<!DOCTYPE html>
<html>
<head>
<style>
  .text {
    color: blue;
  }
  #para {
    color: green;
  }
</style>
</head>
<body>
  <p id="para" class="text">Hello CSS</p>
</body>
</html>
‚ùì What will be the color of "Hello CSS"?

Problem 7: Inline Style vs CSS
<!DOCTYPE html>
<html>
<head>
<style>
  p {
    color: red;
  }
</style>
</head>
<body>
  <p style="color: purple;">Hello Inline</p>
</body>
</html>
‚ùì What will be the color of "Hello Inline"?

Problem 8: !important vs Inline
<!DOCTYPE html>
<html>
<head>
<style>
  p {
    color: orange !important;
  }
</style>
</head>
<body>
  <p style="color: black;">Hello Important</p>
</body>
</html>
‚ùì What will be the color of "Hello Important"?

Problem 9: Multiple Classes
<!DOCTYPE html>
<html>
<head>
<style>
  .red { color: red; }
  .green { color: green; }
  .blue { color: blue; }
</style>
</head>
<body>
  <p class="red green blue">Hello Classes</p>
</body>
</html>
‚ùì What will be the color of "Hello Classes"?

Problem 10: Inheritance + Override
<!DOCTYPE html>
<html>
<head>
<style>
  body {
    color: brown;
  }
  div {
    color: inherit;
  }
  p {
    color: pink;
  }
</style>
</head>
<body>
  <div>
    <p>Hello Trick</p>
  </div>
</body>
</html>
‚ùì What will be the final color of "Hello Trick"?

Problem 6: ID vs Class

‚úÖ Your Answer: green
‚úî Correct ‚Üí ID (#para) has higher specificity (100) than class (.text, 10).
Final = green.

Problem 7: Inline Style vs CSS

‚úÖ Your Answer: purple
‚úî Correct ‚Üí Inline styles have the highest specificity (1000) compared to external/embedded CSS.
Final = purple.

Problem 8: !important vs Inline

‚úÖ Your Answer: orange
‚úî Correct ‚Üí Even though inline style is very strong, !important beats inline styles (unless inline also has !important).
Final = orange.

Problem 9: Multiple Classes

‚úÖ Your Answer: blue
‚úî Correct ‚Üí All three classes apply, but since they have the same specificity, the last one written in CSS wins.
Final = blue.

Problem 10: Inheritance + Override

‚úÖ Your Answer: pink
‚úî Correct ‚Üí

body { color: brown; } ‚Üí would normally pass brown down.

div { color: inherit; } ‚Üí inherits brown from body.

But p { color: pink; } ‚Üí direct rule overrides inherited color.
Final = pink.

<!DOCTYPE html>
<html>
<head>
<style>
  body {
    color: red;
    opacity: 0.5;
  }
  p {
    opacity: inherit;
  }
</style>
</head>
<body>
  <p>Hello Opacity</p>
</body>
</html>


color: red; on body ‚Üí color is inherited by default, so <p> also gets red.

opacity: 0.5; on body ‚Üí opacity is NOT inherited by default.

But you wrote opacity: inherit; on <p> ‚Üí this forces it to take the parent‚Äôs opacity.

So <p> has red color and opacity 0.5.

‚ö° Result:
üëâ Text "Hello Opacity" will appear red but slightly transparent (50%).





<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<             RECAP          >>>>>>>>>>>>>>>>>>>>>>>..
‚úÖ 1. Inheritance

Some CSS properties are inherited by default (mainly text-related).

Others are NOT inherited by default (mainly box model & layout).

Inherited by default

color

font properties (font-family, font-size, etc.)

line-height

visibility

Not inherited by default

background

margin, padding

border

width, height

opacity

üëâ You can force inheritance:

p { background-color: inherit; }

‚úÖ 2. Cascading (Conflict Resolution Rules)

When multiple rules apply to the same element, CSS decides the winner in this order:

Importance

!important > everything else

Specificity

Inline styles ‚Üí 1000

ID selector ‚Üí 100

Class / attribute / pseudo-class ‚Üí 10

Element / pseudo-element ‚Üí 1

Source Order

If same specificity, the last declared rule wins.

‚úÖ 3. Specificity Examples
Selector	Specificity Score
p	1
.class	10
#id	100
p.class	11
div p	2
style="..."	1000
p { color:red !important; }	‚àû (beats all)
‚úÖ 4. Inheritance + Cascade Together

Example:

body { color: blue; }      /* inherited by children */
p { color: green; }        /* overrides inheritance */
#special { color: red; }   /* higher specificity */
p { color: purple !important; } /* final winner */


Final color for <p id="special">: purple ‚úÖ

‚úÖ 5. Quick Analogy

Inheritance = traits passed from parents to children (like eye color).

Cascading = rules to solve conflicts when multiple styles apply (like deciding whose opinion wins).

Specificity = priority levels in those rules.

‚ö° Golden Rule:
üëâ !important > Inline > ID > Class > Element > Inherited




<!DOCTYPE html>
<html>
<head>
  <style>
    body {
      font-family: Georgia, serif;
      color: purple;
    }
    p {
      color: blue;
      font-size: 18px;
    }
    .special {
      color: green;
      font-family: "Courier New", monospace;
    }
    #unique {
      color: red;
    }
  </style>
</head>
<body>
  <p>This is normal paragraph</p>
  <p class="special">This is special paragraph</p>
  <p id="unique" class="special">This is unique paragraph</p>
  <p style="color: orange;">This is inline styled paragraph</p>
</body>
</html>
Rule Analysis:
Body ‚Üí gives font = Georgia, color = purple

(inherited unless overridden)

p ‚Üí overrides:

color = blue

font-size = 18px

.special ‚Üí overrides for that class:

color = green

font-family = Courier New

#unique ‚Üí overrides:

color = red (ID beats class)

Inline style ‚Üí strongest (overrides everything with same property).

Final Output:
First <p> ‚Üí blue text, Georgia font, 18px

Second <p class="special"> ‚Üí green text, Courier New font, 18px

Third <p id="unique" class="special"> ‚Üí red text, Courier New font, 18px

Fourth <p style="color: orange;"> ‚Üí orange text, Georgia font, 18px

‚úÖ Answer Summary:

Normal ‚Üí Blue + Georgia

Special ‚Üí Green + Courier New

Unique ‚Üí Red + Courier New

Inline ‚Üí Orange + Georgia
